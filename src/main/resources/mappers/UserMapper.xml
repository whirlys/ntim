<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.whirly.dao.UserMapper">
	<resultMap id="BaseResultMap" type="com.whirly.model.User">
		<id column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="account" jdbcType="VARCHAR" property="account" />
		<!-- <result column="password" jdbcType="VARCHAR" property="password" /> -->
		<result column="username" jdbcType="VARCHAR" property="username" />
		<result column="is_staff" jdbcType="BIT" property="isStaff" />
		<result column="is_active" jdbcType="BIT" property="isActive" />
		<result column="role" jdbcType="VARCHAR" property="role" />
		<result column="avatar" jdbcType="VARCHAR" property="avatar" />
		<result column="signature" jdbcType="VARCHAR" property="signature" />
		<result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
		<result column="last_login" jdbcType="TIMESTAMP" property="lastLogin" />
	</resultMap>
	<!-- 映射VO -->
	<resultMap id="BaseResultMapVO" type="com.whirly.vo.UserVO">
		<id column="user_id" jdbcType="INTEGER" property="id" />
		<result column="username" jdbcType="VARCHAR" property="username" />
		<result column="avatar" jdbcType="VARCHAR" property="avatar" />
		<result column="signature" jdbcType="VARCHAR" property="sign" />
	</resultMap>
	<!-- 发布者用：映射好友列表 -->
	<resultMap id="ResultMapFriendsListVO" type="com.whirly.vo.FriendsListVO">
		<id column="class_id" jdbcType="INTEGER" property="id" />
		<result column="groupname" jdbcType="VARCHAR" property="groupname" />
		<collection property="list" resultMap="BaseResultMapVO" />
	</resultMap>
	<!-- 根据通知的id返回接收者，并且按是否已读和班级分组 -->
	<resultMap id="ReceiverVOMap" type="com.whirly.vo.ReceiverVO">
		<result column="notice_id" jdbcType="INTEGER" property="noticeId" />
		<result column="is_read" jdbcType="BIT" property="isRead" />
		<collection property="groups" resultMap="ResultMapFriendsListVO" />
	</resultMap>

	<!-- 根据表单的id返回接收者，并且按是否已填和班级分组 -->
	<resultMap id="ReceiverFormVOMap" type="com.whirly.vo.ReceiverFormVO">
		<result column="form_id" jdbcType="INTEGER" property="formId" />
		<result column="filled" jdbcType="BIT" property="filled" />
		<collection property="groups" resultMap="ResultMapFriendsListVO" />
	</resultMap>

	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		user_id, account, password, username, is_staff, is_active,
		role, avatar,
		signature,
		createtime, last_login
	</sql>
	<select id="selectByExample" parameterType="com.whirly.model.UserExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where user_id = #{userId,jdbcType=INTEGER}
	</select>

	<!-- 根据id查询VO -->
	<select id="selectVOById" parameterType="java.lang.Integer"
		resultMap="BaseResultMapVO">
		select user_id,username, avatar, signature
		from user
		where
		user_id = #{userId,jdbcType=INTEGER}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user
		where user_id = #{userId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.whirly.model.UserExample">
		delete from user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.whirly.model.User">
		<selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user (user_id, account, password,
		username, is_staff,
		is_active,
		role, avatar, signature,
		createtime, last_login)
		values
		(#{userId,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{username,jdbcType=VARCHAR},
		#{isStaff,jdbcType=BIT}, #{isActive,jdbcType=BIT},
		#{role,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR},
		#{signature,jdbcType=VARCHAR},
		#{createtime,jdbcType=TIMESTAMP},
		#{lastLogin,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="com.whirly.model.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				user_id,
			</if>
			<if test="account != null">
				account,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="username != null">
				username,
			</if>
			<if test="isStaff != null">
				is_staff,
			</if>
			<if test="isActive != null">
				is_active,
			</if>
			<if test="role != null">
				role,
			</if>
			<if test="avatar != null">
				avatar,
			</if>
			<if test="signature != null">
				signature,
			</if>
			<if test="createtime != null">
				createtime,
			</if>
			<if test="lastLogin != null">
				last_login,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="account != null">
				#{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="username != null">
				#{username,jdbcType=VARCHAR},
			</if>
			<if test="isStaff != null">
				#{isStaff,jdbcType=BIT},
			</if>
			<if test="isActive != null">
				#{isActive,jdbcType=BIT},
			</if>
			<if test="role != null">
				#{role,jdbcType=VARCHAR},
			</if>
			<if test="avatar != null">
				#{avatar,jdbcType=VARCHAR},
			</if>
			<if test="signature != null">
				#{signature,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				#{createtime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastLogin != null">
				#{lastLogin,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<!-- 批量插入数据 ，返回主键 -->
	<insert id="batchInsert" useGeneratedKeys="true" keyProperty="userId"
		parameterType="java.util.List">
		insert into user (account, password,
		username, is_staff,
		is_active,
		role, avatar, signature,
		createtime, last_login)
		values

		<foreach collection="list" item="user" index="index"
			separator=",">
			(
			#{user.account,jdbcType=VARCHAR},
			#{user.password,jdbcType=VARCHAR},
			#{user.username,jdbcType=VARCHAR},
			#{user.isStaff,jdbcType=BIT},
			#{user.isActive,jdbcType=BIT},
			#{user.role,jdbcType=VARCHAR},
			#{user.avatar,jdbcType=VARCHAR},
			#{user.signature,jdbcType=VARCHAR},
			#{user.createtime,jdbcType=TIMESTAMP},
			#{user.lastLogin,jdbcType=TIMESTAMP})
		</foreach>

	</insert>
	<select id="countByExample" parameterType="com.whirly.model.UserExample"
		resultType="java.lang.Long">
		select count(*) from user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update user
		<set>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=INTEGER},
			</if>
			<if test="record.account != null">
				account = #{record.account,jdbcType=VARCHAR},
			</if>
			<if test="record.password != null">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.username != null">
				username = #{record.username,jdbcType=VARCHAR},
			</if>
			<if test="record.isStaff != null">
				is_staff = #{record.isStaff,jdbcType=BIT},
			</if>
			<if test="record.isActive != null">
				is_active = #{record.isActive,jdbcType=BIT},
			</if>
			<if test="record.role != null">
				role = #{record.role,jdbcType=VARCHAR},
			</if>
			<if test="record.avatar != null">
				avatar = #{record.avatar,jdbcType=VARCHAR},
			</if>
			<if test="record.signature != null">
				signature = #{record.signature,jdbcType=VARCHAR},
			</if>
			<if test="record.createtime != null">
				createtime = #{record.createtime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.lastLogin != null">
				last_login = #{record.lastLogin,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update user
		set user_id = #{record.userId,jdbcType=INTEGER},
		account =
		#{record.account,jdbcType=VARCHAR},
		password =
		#{record.password,jdbcType=VARCHAR},
		username =
		#{record.username,jdbcType=VARCHAR},
		is_staff =
		#{record.isStaff,jdbcType=BIT},
		is_active =
		#{record.isActive,jdbcType=BIT},
		role =
		#{record.role,jdbcType=VARCHAR},
		avatar =
		#{record.avatar,jdbcType=VARCHAR},
		signature =
		#{record.signature,jdbcType=VARCHAR},
		createtime =
		#{record.createtime,jdbcType=TIMESTAMP},
		last_login =
		#{record.lastLogin,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.whirly.model.User">
		update user
		<set>
			<if test="account != null">
				account = #{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR},
			</if>
			<if test="isStaff != null">
				is_staff = #{isStaff,jdbcType=BIT},
			</if>
			<if test="isActive != null">
				is_active = #{isActive,jdbcType=BIT},
			</if>
			<if test="role != null">
				role = #{role,jdbcType=VARCHAR},
			</if>
			<if test="avatar != null">
				avatar = #{avatar,jdbcType=VARCHAR},
			</if>
			<if test="signature != null">
				signature = #{signature,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				createtime = #{createtime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastLogin != null">
				last_login = #{lastLogin,jdbcType=TIMESTAMP},
			</if>
		</set>
		where user_id = #{userId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.whirly.model.User">
		update user
		set
		account = #{account,jdbcType=VARCHAR},
		password =
		#{password,jdbcType=VARCHAR},
		username = #{username,jdbcType=VARCHAR},
		is_staff = #{isStaff,jdbcType=BIT},
		is_active =
		#{isActive,jdbcType=BIT},
		role = #{role,jdbcType=VARCHAR},
		avatar =
		#{avatar,jdbcType=VARCHAR},
		signature = #{signature,jdbcType=VARCHAR},
		createtime = #{createtime,jdbcType=TIMESTAMP},
		last_login =
		#{lastLogin,jdbcType=TIMESTAMP}
		where user_id =
		#{userId,jdbcType=INTEGER}
	</update>
	<select id="selectByExampleWithRowbounds" parameterType="com.whirly.model.UserExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>

	<select id="findAccounts" parameterType="java.util.List"
		resultType="java.lang.String">
		select account from user where account in
		<!-- 这里要将collection属性的值标记为list，不然不知道传入的参数是list separator表示分离器 item表示list中的一个元素 -->
		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">#{item}</foreach>
	</select>

	<!-- 发布者用：根据发布者的 publicerId查询好友列表，好友按班级划分 -->
	<!-- 注意：表 managed.user_id 实际是 发布者的 publicer_id而不是user_id，嫌麻烦没改，会误导人 -->
	<select id="selectFriendsListVOByPublicerUserId" parameterType="java.lang.Integer"
		resultMap="ResultMapFriendsListVO">
		select u.user_id, u.username, u.avatar,
		u.signature,b.groupname,b.class_id from user u join

		(select
		user_id,c.class_id,groupname from student s JOIN

		(select class_id,
		concat(grade,profession,class_number,"班") as groupname from
		class
		where
		class_id in (select class_id from managed where user_id =
		#{publicerId,jdbcType=INTEGER})) c

		on s.class_id = c.class_id) b
		on
		u.user_id = b.user_id
	</select>
	<!-- 学生用：根据学生的studentId查询同班同学 -->
	<select id="selectClassmateByStudentId" parameterType="java.lang.Integer"
		resultMap="ResultMapFriendsListVO">
		select u.user_id, u.username, u.avatar,
		u.signature,concat(grade,profession,class_number,"班") as
		groupname,c.class_id
		from
		class c join student s join user u on
		c.class_id=s.class_id and
		u.user_id=s.user_id and c.class_id in
		(select
		s1.class_id from student s1 where s1.student_id =
		#{studentId,jdbcType=INTEGER})
	</select>
	<!-- 学生用：根据学生的studentId查询发布者 -->
	<!-- 注意：表 managed.user_id 实际是 发布者的 publicer_id而不是user_id，嫌麻烦没改，会误导人 -->
	<select id="selectPublicersByStudentId" parameterType="java.lang.Integer"
		resultMap="BaseResultMapVO">
		select u.user_id, u.username, u.avatar,
		u.signature from user
		u where u.user_id in (
		select p.user_id
		from managed m join publicer p
		where
		m.user_id=p.publicer_id and
		m.class_id in
		( select s.class_id from
		student s where s.student_id =
		#{studentId,jdbcType=INTEGER}))
	</select>
	<!-- 发布者用：根据发布者的 publicerId查询好友列表，好友按班级划分 -->
	<!-- 注意：表 managed.user_id 实际是 发布者的 publicer_id而不是user_id，嫌麻烦没改，会误导人 -->
	<!-- 发布通知选择接收人的时候用，不要 avatar 和sign节省带宽 -->
	<select id="selectFriendsListVOByPublicerIdSimple"
		parameterType="java.lang.Integer" resultMap="ResultMapFriendsListVO">

		select u.user_id,
		u.username, b.groupname,b.class_id from user u join

		(select
		user_id,c.class_id,groupname,grade,profession,class_number from
		student s JOIN

		(select class_id,
		concat(grade,profession,class_number,"班") as
		groupname,grade,profession,class_number from
		class
		where
		class_id in
		(select class_id from managed where user_id =
		#{publicerId,jdbcType=INTEGER})) c

		on s.class_id = c.class_id) b
		where
		u.user_id = b.user_id
		order by b.grade asc, b.profession,b.class_number
		asc
	</select>

	<!-- 根据noticeId返回该通知的接收人，并按是否已读分组 -->
	<select id="selectReceiverByNoticeId" parameterType="java.lang.Integer"
		resultMap="ReceiverVOMap">
		select t.notice_id,t.is_read,u.user_id, u.username,
		concat(c.grade,c.profession,c.class_number,"班") as
		groupname,c.class_id from
		timeline t join user u join student s join
		class c
		where t.user_id = u.user_id and u.user_id = s.user_id and
		s.class_id =
		c.class_id and t.notice_id = #{noticeId,jdbcType=INTEGER}
	</select>

	<update id="updateAvatar" parameterType="com.whirly.model.User">
		update user set avatar =
		#{avatar,jdbcType=VARCHAR} where user_id =
		#{userId,jdbcType=INTEGER}
	</update>
	<update id="updatePassword" parameterType="com.whirly.model.User">
		update user set
		password
		=
		#{password,jdbcType=VARCHAR} where user_id =
		#{userId,jdbcType=INTEGER}
	</update>

	<select id="selectInDepId" resultMap="BaseResultMapVO">
		select u.user_id, u.username, u.avatar,
		u.signature from user u join
		student s join class c
		where u.user_id = s.user_id and c.class_id =
		s.class_id
		and c.department_id in
		<foreach collection="array" item="deparmentId" index="index"
			open="(" close=")" separator=",">
			#{deparmentId}
		</foreach>
	</select>

	<select id="selectPublicersByDepartmentId" parameterType="java.lang.Integer"
		resultMap="BaseResultMapVO">

		select u.user_id,
		u.username, avatar,signature from
		user u
		join publicer
		p
		where
		u.user_id = p.user_id and p.deparment_id =
		#{departmentId,jdbcType=INTEGER}
	</select>
	<update id="updateSign" parameterType="com.whirly.model.User">
		update user set
		signature =
		#{signature,jdbcType=VARCHAR} where user_id =
		#{userId,jdbcType=INTEGER}
	</update>

	<update id="updateLastLogin" parameterType="com.whirly.model.User">
		update user set
		last_login =
		now() where user_id =
		#{userId,jdbcType=INTEGER}
	</update>

	<!-- 根据formId返回该表单的接收人，并按是否已填分组 -->
	<select id="selectReceiverByFormId" parameterType="java.lang.Integer"
		resultMap="ReceiverFormVOMap">
		select r.form_id,r.filled,u.user_id, u.username,
		concat(c.grade,c.profession,c.class_number,"班") as
		groupname,c.class_id from
		record r join user u join student s join
		class c
		where r.user_id = u.user_id and u.user_id = s.user_id and
		s.class_id =
		c.class_id and r.form_id = #{formId,jdbcType=INTEGER}
	</select>
</mapper>