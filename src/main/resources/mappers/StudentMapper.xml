<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.whirly.dao.StudentMapper">
	<resultMap id="BaseResultMap" type="com.whirly.model.Student">
		<id column="student_id" jdbcType="INTEGER" property="studentId" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="class_id" jdbcType="INTEGER" property="classId" />
		<result column="sex" jdbcType="BIT" property="sex" />
		<result column="birthday" jdbcType="DATE" property="birthday" />
		<result column="student_type" jdbcType="VARCHAR" property="studentType" />
		<result column="long_phone" jdbcType="VARCHAR" property="longPhone" />
		<result column="short_phone" jdbcType="VARCHAR" property="shortPhone" />
		<result column="duty" jdbcType="VARCHAR" property="duty" />
		<result column="family_phone" jdbcType="VARCHAR" property="familyPhone" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="qq" jdbcType="VARCHAR" property="qq" />
		<result column="id_number" jdbcType="VARCHAR" property="idNumber" />
		<result column="home_address" jdbcType="VARCHAR" property="homeAddress" />

		<association property="user" column="user_id"
			select="com.whirly.dao.UserMapper.selectByPrimaryKey" />
		<association property="classs" column="class_id"
			select="com.whirly.dao.ClasssMapper.selectByPrimaryKey" />
	</resultMap>
	<!-- 返回VO -->
	<resultMap id="BaseResultMapVO" type="com.whirly.vo.StudentVO">
		<id column="student_id" jdbcType="INTEGER" property="studentId" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="class_id" jdbcType="INTEGER" property="classId" />
		<result column="sex" jdbcType="BIT" property="sex" />
		<result column="birthday" jdbcType="DATE" property="birthday" />
		<result column="student_type" jdbcType="VARCHAR" property="studentType" />
		<result column="long_phone" jdbcType="VARCHAR" property="longPhone" />
		<result column="short_phone" jdbcType="VARCHAR" property="shortPhone" />
		<result column="duty" jdbcType="VARCHAR" property="duty" />
		<result column="family_phone" jdbcType="VARCHAR" property="familyPhone" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="qq" jdbcType="VARCHAR" property="qq" />
		<result column="id_number" jdbcType="VARCHAR" property="idNumber" />
		<result column="home_address" jdbcType="VARCHAR" property="homeAddress" />

		<result column="department_id" jdbcType="INTEGER" property="departmentId" />
		<result column="name" jdbcType="VARCHAR" property="departmentName" />

		<result column="profession" jdbcType="VARCHAR" property="profession" />
		<result column="grade" jdbcType="INTEGER" property="grade" />
		<result column="class_number" jdbcType="INTEGER" property="classNumber" />

		<result column="account" jdbcType="VARCHAR" property="account" />
		<result column="username" jdbcType="VARCHAR" property="username" />
		<result column="is_active" jdbcType="BIT" property="isActive" />
		<result column="role" jdbcType="VARCHAR" property="role" />
		<result column="avatar" jdbcType="VARCHAR" property="avatar" />
		<result column="signature" jdbcType="VARCHAR" property="signature" />
		<result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
		<result column="last_login" jdbcType="TIMESTAMP" property="lastLogin" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		student_id, user_id, class_id, sex, birthday, student_type,
		long_phone,
		short_phone,
		duty, family_phone, email, qq, id_number,
		home_address
	</sql>
	<!-- VO查询，班级和用户的字段 -->
	<sql id="VO_Column_List">
		department_id, profession, grade, class_number,
		account,username, is_active,
		role, avatar,
		signature,
		createtime,
		last_login
	</sql>
	<select id="selectByExample" parameterType="com.whirly.model.StudentExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from student
		where student_id = #{studentId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		student
		where student_id = #{studentId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.whirly.model.StudentExample">
		delete from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.whirly.model.Student">
		insert into student
		(student_id, user_id, class_id,
		sex, birthday, student_type,
		long_phone, short_phone, duty,
		family_phone, email, qq,
		id_number,
		home_address)
		values (#{studentId,jdbcType=INTEGER},
		#{userId,jdbcType=INTEGER},
		#{classId,jdbcType=INTEGER},
		#{sex,jdbcType=BIT}, #{birthday,jdbcType=DATE},
		#{studentType,jdbcType=VARCHAR},
		#{longPhone,jdbcType=VARCHAR},
		#{shortPhone,jdbcType=VARCHAR},
		#{duty,jdbcType=VARCHAR},
		#{familyPhone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
		#{qq,jdbcType=VARCHAR},
		#{idNumber,jdbcType=VARCHAR},
		#{homeAddress,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.whirly.model.Student">
		insert into student
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="studentId != null">
				student_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="classId != null">
				class_id,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="birthday != null">
				birthday,
			</if>
			<if test="studentType != null">
				student_type,
			</if>
			<if test="longPhone != null">
				long_phone,
			</if>
			<if test="shortPhone != null">
				short_phone,
			</if>
			<if test="duty != null">
				duty,
			</if>
			<if test="familyPhone != null">
				family_phone,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="qq != null">
				qq,
			</if>
			<if test="idNumber != null">
				id_number,
			</if>
			<if test="homeAddress != null">
				home_address,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="studentId != null">
				#{studentId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="classId != null">
				#{classId,jdbcType=INTEGER},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=BIT},
			</if>
			<if test="birthday != null">
				#{birthday,jdbcType=DATE},
			</if>
			<if test="studentType != null">
				#{studentType,jdbcType=VARCHAR},
			</if>
			<if test="longPhone != null">
				#{longPhone,jdbcType=VARCHAR},
			</if>
			<if test="shortPhone != null">
				#{shortPhone,jdbcType=VARCHAR},
			</if>
			<if test="duty != null">
				#{duty,jdbcType=VARCHAR},
			</if>
			<if test="familyPhone != null">
				#{familyPhone,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="qq != null">
				#{qq,jdbcType=VARCHAR},
			</if>
			<if test="idNumber != null">
				#{idNumber,jdbcType=VARCHAR},
			</if>
			<if test="homeAddress != null">
				#{homeAddress,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<!-- 批量插入数据 ，返回主键 -->
	<insert id="batchInsert" useGeneratedKeys="true" keyProperty="studentId"
		parameterType="java.util.List">
		insert into student
		(user_id, class_id,
		sex, birthday,
		student_type,
		long_phone, short_phone, duty,
		family_phone, email, qq,
		id_number,
		home_address)
		values

		<foreach collection="list" item="student" index="index"
			separator=",">
			(#{student.userId,jdbcType=INTEGER},
			#{student.classId,jdbcType=INTEGER},
			#{student.sex,jdbcType=BIT},
			#{student.birthday,jdbcType=DATE},
			#{student.studentType,jdbcType=VARCHAR},
			#{student.longPhone,jdbcType=VARCHAR},
			#{student.shortPhone,jdbcType=VARCHAR},
			#{student.duty,jdbcType=VARCHAR},
			#{student.familyPhone,jdbcType=VARCHAR},
			#{student.email,jdbcType=VARCHAR},
			#{student.qq,jdbcType=VARCHAR},
			#{student.idNumber,jdbcType=VARCHAR},
			#{student.homeAddress,jdbcType=VARCHAR})
		</foreach>

	</insert>
	<select id="countByExample" parameterType="com.whirly.model.StudentExample"
		resultType="java.lang.Long">
		select count(*) from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update student
		<set>
			<if test="record.studentId != null">
				student_id = #{record.studentId,jdbcType=INTEGER},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=INTEGER},
			</if>
			<if test="record.classId != null">
				class_id = #{record.classId,jdbcType=INTEGER},
			</if>
			<if test="record.sex != null">
				sex = #{record.sex,jdbcType=BIT},
			</if>
			<if test="record.birthday != null">
				birthday = #{record.birthday,jdbcType=DATE},
			</if>
			<if test="record.studentType != null">
				student_type = #{record.studentType,jdbcType=VARCHAR},
			</if>
			<if test="record.longPhone != null">
				long_phone = #{record.longPhone,jdbcType=VARCHAR},
			</if>
			<if test="record.shortPhone != null">
				short_phone = #{record.shortPhone,jdbcType=VARCHAR},
			</if>
			<if test="record.duty != null">
				duty = #{record.duty,jdbcType=VARCHAR},
			</if>
			<if test="record.familyPhone != null">
				family_phone = #{record.familyPhone,jdbcType=VARCHAR},
			</if>
			<if test="record.email != null">
				email = #{record.email,jdbcType=VARCHAR},
			</if>
			<if test="record.qq != null">
				qq = #{record.qq,jdbcType=VARCHAR},
			</if>
			<if test="record.idNumber != null">
				id_number = #{record.idNumber,jdbcType=VARCHAR},
			</if>
			<if test="record.homeAddress != null">
				home_address = #{record.homeAddress,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update student
		set student_id = #{record.studentId,jdbcType=INTEGER},
		user_id = #{record.userId,jdbcType=INTEGER},
		class_id =
		#{record.classId,jdbcType=INTEGER},
		sex = #{record.sex,jdbcType=BIT},
		birthday = #{record.birthday,jdbcType=DATE},
		student_type =
		#{record.studentType,jdbcType=VARCHAR},
		long_phone =
		#{record.longPhone,jdbcType=VARCHAR},
		short_phone =
		#{record.shortPhone,jdbcType=VARCHAR},
		duty =
		#{record.duty,jdbcType=VARCHAR},
		family_phone =
		#{record.familyPhone,jdbcType=VARCHAR},
		email =
		#{record.email,jdbcType=VARCHAR},
		qq = #{record.qq,jdbcType=VARCHAR},
		id_number = #{record.idNumber,jdbcType=VARCHAR},
		home_address =
		#{record.homeAddress,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.whirly.model.Student">
		update student
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="classId != null">
				class_id = #{classId,jdbcType=INTEGER},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=BIT},
			</if>
			<if test="birthday != null">
				birthday = #{birthday,jdbcType=DATE},
			</if>
			<if test="studentType != null">
				student_type = #{studentType,jdbcType=VARCHAR},
			</if>
			<if test="longPhone != null">
				long_phone = #{longPhone,jdbcType=VARCHAR},
			</if>
			<if test="shortPhone != null">
				short_phone = #{shortPhone,jdbcType=VARCHAR},
			</if>
			<if test="duty != null">
				duty = #{duty,jdbcType=VARCHAR},
			</if>
			<if test="familyPhone != null">
				family_phone = #{familyPhone,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="qq != null">
				qq = #{qq,jdbcType=VARCHAR},
			</if>
			<if test="idNumber != null">
				id_number = #{idNumber,jdbcType=VARCHAR},
			</if>
			<if test="homeAddress != null">
				home_address = #{homeAddress,jdbcType=VARCHAR},
			</if>
		</set>
		where student_id = #{studentId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.whirly.model.Student">
		update student
		set
		user_id = #{userId,jdbcType=INTEGER},
		class_id =
		#{classId,jdbcType=INTEGER},
		sex = #{sex,jdbcType=BIT},
		birthday =
		#{birthday,jdbcType=DATE},
		student_type =
		#{studentType,jdbcType=VARCHAR},
		long_phone =
		#{longPhone,jdbcType=VARCHAR},
		short_phone =
		#{shortPhone,jdbcType=VARCHAR},
		duty = #{duty,jdbcType=VARCHAR},
		family_phone = #{familyPhone,jdbcType=VARCHAR},
		email =
		#{email,jdbcType=VARCHAR},
		qq = #{qq,jdbcType=VARCHAR},
		id_number =
		#{idNumber,jdbcType=VARCHAR},
		home_address =
		#{homeAddress,jdbcType=VARCHAR}
		where student_id =
		#{studentId,jdbcType=INTEGER}
	</update>
	<select id="selectByExampleWithRowbounds" parameterType="com.whirly.model.StudentExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<!-- 根据studentId批量查询，返回VO s u c d -->
	<select id="selectByids" resultMap="BaseResultMapVO"
		parameterType="java.util.List">
		select
		student_id, sex,
		birthday, student_type, long_phone, short_phone,
		duty, family_phone,
		email, qq, id_number, home_address,
		c.class_id,
		profession, grade, class_number,
		u.user_id,account,username,
		u.is_active, role, avatar, signature, u.createtime, last_login,
		d.department_id, d.name

		from student s , class c, user u, department d
		where
		s.user_id = u.user_id and s.class_id = c.class_id and
		c.department_id =
		d.department_id
		and s.student_id in

		<foreach collection="list" item="id" index="index" open="("
			separator="," close=")">
			#{id,jdbcType=INTEGER}
		</foreach>

	</select>

	<!-- 根据searchForm查询 -->
	<select id="selectBySearchForm" resultMap="BaseResultMapVO"
		parameterType="com.whirly.form.StudentSearchForm">
		select
		student_id, sex,
		birthday, student_type, long_phone, short_phone,
		duty, family_phone,
		email, qq, id_number, home_address,
		c.class_id,
		profession, grade, class_number,
		u.user_id,account,username,
		u.is_active, role, avatar, signature, u.createtime, last_login,
		d.department_id, d.name

		from student s , class c, user u, department d
		where
		s.user_id = u.user_id and s.class_id = c.class_id and
		c.department_id =
		d.department_id

		<if test="q != null">
			and (account like #{q,jdbcType=VARCHAR} or username like
			#{q,jdbcType=VARCHAR} or email like #{q,jdbcType=VARCHAR})
		</if>


	</select>

	<select id="selectVOByUserId" resultMap="BaseResultMapVO"
		parameterType="com.whirly.form.StudentSearchForm">
		select
		student_id, sex,
		birthday, student_type,
		long_phone, short_phone,
		duty, family_phone,
		email, qq, id_number,
		home_address,
		c.class_id,
		profession, grade, class_number,
		u.user_id,account,username,
		u.is_active, role, avatar, signature,
		u.createtime, last_login,
		d.department_id, d.name

		from student s , class
		c, user u, department d
		where
		s.user_id = u.user_id and s.class_id =
		c.class_id and
		c.department_id =
		d.department_id

		and s.user_id =
		#{userId,jdbcType=INTEGER}


	</select>
	<select id="selectVOByClassId" resultMap="BaseResultMapVO"
		parameterType="java.lang.Integer">
		select
		student_id, sex,
		birthday, student_type,
		long_phone, short_phone,
		duty, family_phone,
		email, qq, id_number,
		home_address,class_id,
		u.user_id,account,username,
		u.is_active, role,
		avatar, signature,
		u.createtime, last_login

		from
		student s , user u
		where
		s.user_id = u.user_id and
		s.class_id = #{classsId,jdbcType=INTEGER}
	</select>
</mapper>